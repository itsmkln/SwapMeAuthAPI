// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwapMeAngularAuthAPI.Context;

#nullable disable

namespace SwapMeAngularAuthAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230212220650_v3")]
    partial class v3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameId");

                    b.ToTable("Games", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.HasIndex("GameId")
                        .IsUnique()
                        .HasFilter("[GameId] IS NOT NULL");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Image", b =>
                {
                    b.Property<int>("GameImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameImageId"));

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImageFile")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("GameImageId");

                    b.HasIndex("GameId")
                        .IsUnique()
                        .HasFilter("[GameId] IS NOT NULL");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPhysical")
                        .HasColumnType("bit");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.HasIndex("GameId");

                    b.HasIndex("OfferTypeId")
                        .IsUnique();

                    b.HasIndex("PlatformId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.OfferType", b =>
                {
                    b.Property<int>("OfferTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfferTypeId");

                    b.ToTable("OfferTypes", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatformId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("OfferId")
                        .IsUnique()
                        .HasFilter("[OfferId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserInfoId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserInfoId"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserInfoId");

                    b.ToTable("UsersInfo", (string)null);
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Genre", b =>
                {
                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.Game", "Game")
                        .WithOne("Genre")
                        .HasForeignKey("SwapMeAngularAuthAPI.Models.Entities.Genre", "GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Image", b =>
                {
                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.Game", "Game")
                        .WithOne("Image")
                        .HasForeignKey("SwapMeAngularAuthAPI.Models.Entities.Image", "GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Offer", b =>
                {
                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.OfferType", null)
                        .WithOne("Offer")
                        .HasForeignKey("SwapMeAngularAuthAPI.Models.Entities.Offer", "OfferTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.Platform", "Platform")
                        .WithOne("Offer")
                        .HasForeignKey("SwapMeAngularAuthAPI.Models.Entities.Offer", "PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Transaction", b =>
                {
                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.Offer", "Offer")
                        .WithOne("Transaction")
                        .HasForeignKey("SwapMeAngularAuthAPI.Models.Entities.Transaction", "OfferId");

                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.User", b =>
                {
                    b.HasOne("SwapMeAngularAuthAPI.Models.Entities.UserInfo", "UserInfo")
                        .WithOne("User")
                        .HasForeignKey("SwapMeAngularAuthAPI.Models.Entities.User", "UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Game", b =>
                {
                    b.Navigation("Genre");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Offer", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.OfferType", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.Platform", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.User", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SwapMeAngularAuthAPI.Models.Entities.UserInfo", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
